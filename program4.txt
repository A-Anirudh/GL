#include <GL/glut.h>
#include <stdio.h>

void myInit() {
    glClearColor(0.0, 0.0, 1.0, 1.0); // Set background color
    gluOrtho2D(-500, 500, -500, 500); // Set the coordinate system
}

void drawTriangle() {
    glBegin(GL_POLYGON);
    glVertex2f(100, 100);
    glVertex2f(200, 100);
    glVertex2f(150, 150);
    glEnd();
}

void translate() {
    glPushMatrix();
    glTranslated(100, 0, 0); // Translate by (100, 0)
    drawTriangle();
    glPopMatrix();
}

void rotateTriangle() {
    glPushMatrix();
    glRotated(45, 0, 0, 1); // Rotate 45 degrees around the z-axis
    drawTriangle();
    glPopMatrix();
}

void pivotPointRotate() {
    glColor3f(1, 1, 0); // Set color to yellow
    glPushMatrix();
    glTranslated(100, 100, 0); // Move pivot point to (100, 100)
    glRotated(45, 0, 0, 1); // Rotate 45 degrees around the z-axis
    glTranslated(-100, -100, 0); // Move back to the original position
    drawTriangle();
    glPopMatrix();
}

void scaleTriangle() {
    glPushMatrix();
    glScaled(2, 2, 1); // Scale by a factor of 2 in x and y directions
    drawTriangle();
    glPopMatrix();
}

void pivotPointScale() {
    glColor3f(1, 1, 0); // Set color to yellow
    glPushMatrix();
    glTranslated(100, 100, 0); // Move pivot point to (100, 100)
    glScaled(2, 2, 1); // Scale by a factor of 2 in x and y directions
    glTranslated(-100, -100, 0); // Move back to the original position
    drawTriangle();
    glPopMatrix();
}

void displayMe() {
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(1.0, 0.0, 0.0, 0.0); // Set clear color to red
    glColor3f(1, 0, 0); // Set drawing color to red
    drawTriangle(); // Draw the original triangle
    glFlush();
}

void menuRotate(int id) {
    switch (id) {
        case 1: translate(); break;
        case 2: rotateTriangle(); break;
        case 3: pivotPointRotate(); break;
        case 4: scaleTriangle(); break;
        case 5: pivotPointScale(); break;
        default: exit(0); // Exit on any other value
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Transformation");

    myInit();

    // Create menu and attach to right mouse button
    glutCreateMenu(menuRotate);
    glutAddMenuEntry("Translate", 1);
    glutAddMenuEntry("Rotation About Origin", 2);
    glutAddMenuEntry("Rotation About Fixed Point", 3);
    glutAddMenuEntry("Scale About Origin", 4);
    glutAddMenuEntry("Scale About Fixed Point", 5);
    glutAddMenuEntry("EXIT", 6);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutDisplayFunc(displayMe);
    glutMainLoop();
    return 0;
}
